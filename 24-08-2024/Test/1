

using System;

namespace CourseEnroll
{
    class VitalSigns
    {
        public int PatientID { get; set; }
        public int HeartRate { get; set; }
        public string BloodPressure { get; set; }
        public double Temperature { get; set; }

        private VitalSigns[] vitalSigns = new VitalSigns[20];
        private int count = 0;

        public void AddVitalSigns()
        {
            int option = 0;
            while (option != -1)
            {
                Console.WriteLine("Enter -1 to stop the entry and 1 to continue");
                option = int.Parse(Console.ReadLine());

                if (option == -1) break;

                if (count >= vitalSigns.Length)
                {
                    Console.WriteLine("Maximum number of patients reached.");
                    break;
                }

                vitalSigns[count] = new VitalSigns();
                Console.WriteLine($"Enter the patient ID of patient {count + 1}:");
                vitalSigns[count].PatientID = int.Parse(Console.ReadLine());
                Console.WriteLine($"Enter the heart rate of patient {count + 1}:");
                vitalSigns[count].HeartRate = int.Parse(Console.ReadLine());
                Console.WriteLine($"Enter the blood pressure of patient {count + 1} (systolic/diastolic):");
                vitalSigns[count].BloodPressure = Console.ReadLine();
                Console.WriteLine($"Enter the temperature of patient {count + 1}:");
                vitalSigns[count].Temperature = double.Parse(Console.ReadLine());

                count++;
            }
        }

        public void FindLowestHeartRate()
        {
            if (count == 0)
            {
                Console.WriteLine("No vital signs available.");
                return;
            }

            int minHeartRateIndex = 0;

            for (int j = 1; j < count; j++)
            {
                if (vitalSigns[j].HeartRate < vitalSigns[minHeartRateIndex].HeartRate)
                {
                    minHeartRateIndex = j;
                }
            }

            Console.WriteLine($"The lowest heart rate: PatientID: {vitalSigns[minHeartRateIndex].PatientID} \nHeartRate: {vitalSigns[minHeartRateIndex].HeartRate}\n");
        }

        public void FindSecondHighestTemperature()
        {
            if (count < 2)
            {
                Console.WriteLine("Not enough data to find the second highest temperature.");
                return;
            }

            double highest = double.MinValue;
            double secondHighest = double.MinValue;

            for (int j = 0; j < count; j++)
            {
                if (vitalSigns[j].Temperature > highest)
                {
                    secondHighest = highest;
                    highest = vitalSigns[j].Temperature;
                }
                else if (vitalSigns[j].Temperature > secondHighest && vitalSigns[j].Temperature < highest)
                {
                    secondHighest = vitalSigns[j].Temperature;
                }
            }

            if (secondHighest == double.MinValue)
            {
                Console.WriteLine("No second highest temperature found.");
            }
            else
            {
                Console.WriteLine($"The second highest temperature: {secondHighest}\n");
            }
        }

        public void SortBySystolicPressure()
        {
            for (int i = 0; i < count - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < count; j++)
                {
                    int systolicCurrent = int.Parse(vitalSigns[j].BloodPressure.Split('/')[0]);
                    int systolicMin = int.Parse(vitalSigns[minIndex].BloodPressure.Split('/')[0]);

                    if (systolicCurrent < systolicMin)
                    {
                        minIndex = j;
                    }
                }

                if (minIndex != i)
                {
                    VitalSigns temp = vitalSigns[i];
                    vitalSigns[i] = vitalSigns[minIndex];
                    vitalSigns[minIndex] = temp;
                }
            }

            Console.WriteLine("Vital signs sorted by systolic pressure:");
            for (int i = 0; i < count; i++)
            {
                Console.WriteLine($"PatientID: {vitalSigns[i].PatientID}, BloodPressure: {vitalSigns[i].BloodPressure}, Temperature: {vitalSigns[i].Temperature}");
            }
        }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            VitalSigns vs = new VitalSigns();
            Console.WriteLine("--------------------------------Add Patients------------------------------");
            vs.AddVitalSigns();
            Console.WriteLine("");
            Console.WriteLine("--------------------------------LowestHeartrate------------------------------");
            vs.FindLowestHeartRate();
            Console.WriteLine("");
            Console.WriteLine("--------------------------------SecondHighestTemparature------------------------------");
            vs.FindSecondHighestTemperature();
            Console.WriteLine("");
            Console.WriteLine("--------------------------------SortBySystolicPressure------------------------------");
            vs.SortBySystolicPressure();
        }
    }
}
-----------------------------------------------------------------------------
output
-----------------------------------------------------------------------------
Enter -1 to stop the entry and 1 to continue
1
Enter the patient ID of patient 1:
101
Enter the heart rate of patient 1:
72
Enter the blood pressure of patient 1 (systolic/diastolic):
120/80
Enter the temperature of patient 1:
36.5
Enter -1 to stop the entry and 1 to continue
1
Enter the patient ID of patient 2:
102
Enter the heart rate of patient 2:
85
Enter the blood pressure of patient 2 (systolic/diastolic):
130/85
Enter the temperature of patient 2:
37.1
Enter -1 to stop the entry and 1 to continue
1
Enter the patient ID of patient 3:
103
Enter the heart rate of patient 3:
78
Enter the blood pressure of patient 3 (systolic/diastolic):
110/70
Enter the temperature of patient 3:
36.9
Enter -1 to stop the entry and 1 to continue
-1
The lowest heart rate: PatientID: 101
HeartRate: 72

The second highest temperature: 36.9

Vital signs sorted by systolic pressure:
PatientID: 103, BloodPressure: 110/70, Temperature: 36.9
PatientID: 101, BloodPressure: 120/80, Temperature: 36.5
PatientID: 102, BloodPressure: 130/85, Temperature: 37.1
Press any key to continue . . .
