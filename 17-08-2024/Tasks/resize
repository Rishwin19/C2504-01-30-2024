
using System;
using System.Collections.Generic;

interface IDrawable
{
    void Draw();
}

abstract class Graphic : IDrawable
{
    public abstract void Draw();

    public void Resize(double scaleFactor)
    {
        // Implement resizing logic if needed
    }
}

class Line : Graphic
{
    public Point StartPoint { get; set; }
    public Point EndPoint { get; set; }

    public Line(Point startPoint, Point endPoint)
    {
        StartPoint = startPoint;
        EndPoint = endPoint;
    }

    public override void Draw()
    {
        Console.WriteLine($"Drawing line from {StartPoint} to {EndPoint}");
    }
}

class Polygon : Graphic
{
    public List<Point> Vertices { get; set; }

    public Polygon(List<Point> vertices)
    {
        Vertices = vertices;
    }

    public override void Draw()
    {
        Console.WriteLine("Drawing polygon with vertices:");
        foreach (var vertex in Vertices)
        {
            Console.WriteLine(vertex);
        }
    }
}

class Point
{
    public int X { get; set; }
    public int Y { get; set; }

    public Point(int x, int y)
    {
        X = x;
        Y = y;
    }

    public override string ToString()
    {
        return $"({X}, {Y})";
    }
}

class Program
{
    static void Main()
    {
        IDrawable line = new Line(new Point(0, 0), new Point(10, 10));
        line.Draw(); // Output: Drawing line from (0,0) to (10,10)

        Graphic polygon = new Polygon(new List<Point> { new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10) });
        polygon.Resize(2); // Resize polygon (method can be implemented)
        polygon.Draw(); // Output: Drawing polygon with vertices: (0,0) (10,0) (10,10) (0,10)
    }
}
