using System;
using System.Data.SqlClient;
using log4net;
using log4net.Config;

namespace CourseEnroll
{
    public class VitalSigns
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(VitalSigns));

        public int PatientID { get; set; }
        public int HeartRate { get; set; }
        public string BloodPressure { get; set; }
        public double Temperature { get; set; }

        private VitalSigns[] vitalSigns = new VitalSigns[20];
        private int count = 0;

        private string connectionString = "Data Source=(localdb)\\ProjectModels;Initial Catalog=HealthDB;Integrated Security=True;";

        public void LoadDataFromDatabase()
        {
            log.Info("Loading data from database...");
            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    string query = "SELECT * FROM VitalSigns";
                    SqlCommand command = new SqlCommand(query, connection);
                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();

                    while (reader.Read() && count < vitalSigns.Length)
                    {
                        vitalSigns[count] = new VitalSigns
                        {
                            PatientID = reader.GetInt32(0),
                            HeartRate = reader.GetInt32(1),
                            BloodPressure = reader.GetString(2),
                            Temperature = reader.GetDouble(3)
                        };
                        count++;
                    }
                }
                log.Info("Data loaded successfully.");
            }
            catch (Exception ex)
            {
                log.Error("Error loading data from database.", ex);
            }
        }

        public void SetTestData(VitalSigns[] testData)
        {
            vitalSigns = testData;
            count = testData.Length;
        }

        public int GetCount()
        {
            return count;
        }

        public void FindLowestHeartRate()
        {
            if (count == 0)
            {
                log.Info("No vital signs available.");
                return;
            }

            int minHeartRateIndex = 0;

            for (int j = 1; j < count; j++)
            {
                if (vitalSigns[j].HeartRate < vitalSigns[minHeartRateIndex].HeartRate)
                {
                    minHeartRateIndex = j;
                }
            }

            log.Info($"The lowest heart rate: PatientID: {vitalSigns[minHeartRateIndex].PatientID} \nHeartRate: {vitalSigns[minHeartRateIndex].HeartRate}");
        }

        public void FindSecondHighestTemperature()
        {
            if (count < 2)
            {
                log.Info("Not enough data to find the second highest temperature.");
                return;
            }

            double highest = double.MinValue;
            double secondHighest = double.MinValue;

            for (int j = 0; j < count; j++)
            {
                if (vitalSigns[j].Temperature > highest)
                {
                    secondHighest = highest;
                    highest = vitalSigns[j].Temperature;
                }
                else if (vitalSigns[j].Temperature > secondHighest && vitalSigns[j].Temperature < highest)
                {
                    secondHighest = vitalSigns[j].Temperature;
                }
            }

            if (secondHighest == double.MinValue)
            {
                log.Info("No second highest temperature found.");
            }
            else
            {
                log.Info($"The second highest temperature: {secondHighest}");
            }
        }

        public void SortBySystolicPressure()
        {
            for (int i = 0; i < count - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < count; j++)
                {
                    int systolicCurrent = int.Parse(vitalSigns[j].BloodPressure.Split('/')[0]);
                    int systolicMin = int.Parse(vitalSigns[minIndex].BloodPressure.Split('/')[0]);

                    if (systolicCurrent < systolicMin)
                    {
                        minIndex = j;
                    }
                }

                if (minIndex != i)
                {
                    VitalSigns temp = vitalSigns[i];
                    vitalSigns[i] = vitalSigns[minIndex];
                    vitalSigns[minIndex] = temp;
                }
            }

            log.Info("Vital signs sorted by systolic pressure:");
            for (int i = 0; i < count; i++)
            {
                log.Info($"PatientID: {vitalSigns[i].PatientID}, BloodPressure: {vitalSigns[i].BloodPressure}, Temperature: {vitalSigns[i].Temperature}");
            }
        }
    }

    internal class Program
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(Program));

        static void Main(string[] args)
        {
            // Initialize log4net
            XmlConfigurator.Configure();

            VitalSigns vs = new VitalSigns();
            log.Info("--------------------------------Loading Data from Database------------------------------");
            vs.LoadDataFromDatabase();
            log.Info("");
            log.Info("--------------------------------Lowest Heart Rate------------------------------");
            vs.FindLowestHeartRate();
            log.Info("");
            log.Info("--------------------------------Second Highest Temperature------------------------------");
            vs.FindSecondHighestTemperature();
            log.Info("");
            log.Info("--------------------------------Sort By Systolic Pressure------------------------------");
            vs.SortBySystolicPressure();
        }
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
app.config
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net, Version=2.0.17.0, Culture=neutral, PublicKeyToken=669e0ddf0bb1aa2a" />
	</configSections>

	<log4net>
		<root>
			<level value="DEBUG" />
			<appender-ref ref="ConsoleAppender" />
		</root>
		<appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date %-5level %message%newline" />
			</layout>
		</appender>
	</log4net>
</configuration>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
UNIT TESTS
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using CourseEnroll;
using System;
using System.IO;

namespace CourseEnroll.Tests
{
    [TestClass()]
    public class VitalSignsTests
    {
        [TestMethod()]
        public void FindLowestHeartRateTest()
        {
            var testData = new[]
            {
                new VitalSigns { PatientID = 1, HeartRate = 80, BloodPressure = "120/80", Temperature = 98.6 },
                new VitalSigns { PatientID = 2, HeartRate = 60, BloodPressure = "110/70", Temperature = 99.1 },
                new VitalSigns { PatientID = 3, HeartRate = 70, BloodPressure = "130/85", Temperature = 97.8 }
            };

            VitalSigns vs = new VitalSigns();
            vs.SetTestData(testData);

            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);
                vs.FindLowestHeartRate();
                string result = sw.ToString();
                Assert.IsTrue(result.Contains("The lowest heart rate: PatientID: 2 \nHeartRate: 60"), "Lowest heart rate should be displayed.");
            }
        }

        [TestMethod()]
        public void FindSecondHighestTemperatureTest()
        {
            var testData = new[]
            {
                new VitalSigns { PatientID = 1, HeartRate = 80, BloodPressure = "120/80", Temperature = 98.6 },
                new VitalSigns { PatientID = 2, HeartRate = 60, BloodPressure = "110/70", Temperature = 99.1 },
                new VitalSigns { PatientID = 3, HeartRate = 70, BloodPressure = "130/85", Temperature = 97.8 }
            };

            VitalSigns vs = new VitalSigns();
            vs.SetTestData(testData);

            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);
                vs.FindSecondHighestTemperature();
                string result = sw.ToString();
                Assert.IsTrue(result.Contains("The second highest temperature: 98.6") || result.Contains("Not enough data to find the second highest temperature."), "Second highest temperature or not enough data message should be displayed.");
            }
        }

        [TestMethod()]
        public void SortBySystolicPressureTest()
        {
            var testData = new[]
            {
                new VitalSigns { PatientID = 1, HeartRate = 80, BloodPressure = "120/80", Temperature = 98.6 },
                new VitalSigns { PatientID = 2, HeartRate = 60, BloodPressure = "110/70", Temperature = 99.1 },
                new VitalSigns { PatientID = 3, HeartRate = 70, BloodPressure = "130/85", Temperature = 97.8 }
            };

            VitalSigns vs = new VitalSigns();
            vs.SetTestData(testData);

            using (StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);
                vs.SortBySystolicPressure();
                string result = sw.ToString();
                Assert.IsTrue(result.Contains("Vital signs sorted by systolic pressure:"), "Vital signs should be sorted by systolic pressure.");
                Assert.IsTrue(result.Contains("PatientID: 2, BloodPressure: 110/70, Temperature: 99.1"), "PatientID 2 should be first.");
                Assert.IsTrue(result.Contains("PatientID: 1, BloodPressure: 120/80, Temperature: 98.6"), "PatientID 1 should be second.");
                Assert.IsTrue(result.Contains("PatientID: 3, BloodPressure: 130/85, Temperature: 97.8"), "PatientID 3 should be last.");
            }
        }

       
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
output
2024-08-31 17:26:25,927 INFO  --------------------------------Loading Data from Database------------------------------
2024-08-31 17:26:25,948 INFO  Loading data from database...
2024-08-31 17:26:26,237 INFO  Data loaded successfully.
2024-08-31 17:26:26,237 INFO
2024-08-31 17:26:26,237 INFO  --------------------------------Lowest Heart Rate------------------------------
2024-08-31 17:26:26,237 INFO  The lowest heart rate: PatientID: 5
HeartRate: 60
2024-08-31 17:26:26,237 INFO
2024-08-31 17:26:26,237 INFO  --------------------------------Second Highest Temperature------------------------------
2024-08-31 17:26:26,237 INFO  The second highest temperature: 100.2
2024-08-31 17:26:26,239 INFO
2024-08-31 17:26:26,239 INFO  --------------------------------Sort By Systolic Pressure------------------------------
2024-08-31 17:26:26,239 INFO  Vital signs sorted by systolic pressure:
2024-08-31 17:26:26,239 INFO  PatientID: 5, BloodPressure: 100/65, Temperature: 98.2
2024-08-31 17:26:26,239 INFO  PatientID: 10, BloodPressure: 105/65, Temperature: 98.4
2024-08-31 17:26:26,239 INFO  PatientID: 3, BloodPressure: 110/70, Temperature: 97.8
2024-08-31 17:26:26,240 INFO  PatientID: 9, BloodPressure: 115/75, Temperature: 97.6
2024-08-31 17:26:26,240 INFO  PatientID: 1, BloodPressure: 120/80, Temperature: 98.6
2024-08-31 17:26:26,240 INFO  PatientID: 6, BloodPressure: 125/78, Temperature: 99.5
2024-08-31 17:26:26,240 INFO  PatientID: 2, BloodPressure: 130/85, Temperature: 99.1
2024-08-31 17:26:26,240 INFO  PatientID: 7, BloodPressure: 135/80, Temperature: 98.9
2024-08-31 17:26:26,240 INFO  PatientID: 4, BloodPressure: 140/90, Temperature: 100.2
2024-08-31 17:26:26,241 INFO  PatientID: 8, BloodPressure: 145/95, Temperature: 100.5
Press any key to continue . . .
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
